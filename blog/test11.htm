<title id="title">The Teacher</title>

<center><p><b>The </b><b>Teacher </b><b>in </b><b>Us </b><b>All</b></p></center>
<p>Communication is a vague, etherial term leaders throw around when needing a scapegoat for why an otherwise well-executed plan went south. Usually accompanying sports metaphors like "didn't follow through" and "dropped the ball."</p>
<p>In truth, we're all pretty rubbish at it.</p>
<p>We say one thing, go back on what we just said in idle-chitchat, say an entirely different thing when setting precedence, tell our colleagues something even more different, then set an entirely new ultimate set of expectations in our heads and wonder why everyone else is too incompetent to meet them.</p>
<p>Like it or not, he who holds vital information is a teacher, and our students (i.e. actual other people) are listening to everything we say and do. This bleeds into other aspects as well. Not just traditional "leadership roles", but any role in which anyone sees us as an authority.</p>
<p>We didn't get what we wanted, but we got exactly what we asked for.</p>
<p>So what does any of this have to do with user experience? Just hold on a minute. We're getting there.</p>
<p>When a user first boots a piece of software, he is greeted with precedence. So much is made over tech support, help desks and documentation, but the importance of that precedence cannot be understated. Within the first five minutes, the user is told what to expect from the software and the rules governing how the interface works.</p>
<p>But there is no "tech illiterate". Only those who were badly taught.</p>
<p>When done correctly, the user, armed with this knowledge, can easily navigate and perform core functions. He knows what functions he can access because he knows precisely what his software was built for. If he needs any "advanced" features, he knows how to get to them because if this one simple thing works this way, then this similar-looking complex thing must as well. And he knows the value of said "advanced" features because they align with the software's core function.</p>
<p>Most importantly, there is a "way home". If the user gets too adventurous for his own good and gets lost down the rabbit hole of advanced settings, there will always be a quick reset to put him back on familiar ground.</p>
<p>This is why Chrome and Android's ecosystems are the <i>de </i><i>facto </i>standard. And as much as I don't care for their products for various anti-consumer reasons, this is one thing that Apple does very well, and why so many older users trust them whole-heartedly.</p>
<p>But when done badly... :deep breath:... boy, oh boy...</p>
<p>When done badly, users are presented with a precedent on the showfloor, bait-and-switched during an actual session, can't find basic tools because it's not clear what, or who, the software was designed for, and will not under any circumstances try anything new because there stands just an equal chance of irreversibly crashing your system as formatting your document.</p>
<p>At this point, tech-support is the fire department arriving just in time to get the cat out of the tree after the neighborhood has already burned down. Which leads to one of two conclusions. "This software is useless" or "I'm stupid when it comes to computers."</p>
<p>Tragically, because the tech industry is seen as some sort of authority (don't know what gave them <b>that </b>impression), so many users choose the latter.</p>
<p>Either way, We didn't get what we wanted, but we got exactly what we asked for.</p>
<p>This is not "dumbing down" our interface or "talking down" to people. This is saying what we mean and meaning what we say. We can't just pick and choose what we want our users <b>or </b>listeners to hear because at the end of the day, like it or not, we are teachers.</p>
<p>And guess what? Our students are listening.</p>
